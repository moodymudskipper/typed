[{"path":"https://moodymudskipper.github.io/typed/articles/typed-in-packages.html","id":"use-typed-in-your-package","dir":"Articles","previous_headings":"","what":"Use {typed} in your package","title":"Using {typed} in packages","text":"Call set package can use ‘typed’, editing DESCRIPTION file editing creating ‘R/.pkg-package.R’","code":"typed::use_typed() devtools::document() # to actually import from the generated roxygen2 comments"},{"path":"https://moodymudskipper.github.io/typed/articles/typed-in-packages.html","id":"use-existing-types-to-define-your-functions","dir":"Articles","previous_headings":"","what":"Use existing types to define your functions","title":"Using {typed} in packages","text":"’s example define types return value, arguments, msg variable body. use roxygen2 tags standard, except ’ll need make sure add @name tag. created function following: see ? present generated code, instead check_arg(), declare(), check_output(). substitution done first ?, efficiency readability, unfamiliar users might intimidated ? calls ? don’t print nicely base R. Note ’re free use functions directly code don’t like ? Syntax.","code":"#' add_or_subtract #' #' @param x double of length 1 #' @param y double of length 1 #' @param subtract whether to subtract instead of adding #' @export #' @name add_or_subtract add_or_subtract <- Double(1) ? function (     x = ? Double(1),      y = ? Double(1),      subtract = FALSE ? Logical(1, anyNA = FALSE)   ) {   Character(1) ? msg   if(subtract) {     msg <- \"subtracting\"     message(msg)     return(x - y)   }     msg <- \"adding\"     message(msg)   x + y } add_or_subtract #> # typed function #> function (x, y, subtract = FALSE)  #> { #>     check_arg(x, Double(1)) #>     check_arg(y, Double(1)) #>     check_arg(subtract, Logical(1, anyNA = FALSE)) #>     declare(\"msg\", Character(1)) #>     if (subtract) { #>         msg <- \"subtracting\" #>         message(msg) #>         return(check_output(x - y, Double(1))) #>     } #>     msg <- \"adding\" #>     message(msg) #>     check_output(x + y, Double(1)) #> } #> # Return type: Double(1) #> # Arg types: #> # x: Double(1) #> # y: Double(1) #> # subtract: Logical(1, anyNA = FALSE)"},{"path":"https://moodymudskipper.github.io/typed/articles/typed-in-packages.html","id":"define-your-own-types-from-existing-types","dir":"Articles","previous_headings":"","what":"Define your own types from existing types","title":"Using {typed} in packages","text":"way define custom types wrap existing ones add constraints type () general, many case ’s good idea start restricted type get checks free. ’s case starting () makes sense : custom type might also just restriction existing type using existing arguments. following example apply simple restriction existing type, using existing argument length. restrict length keep args flexible forwarding : remove flexibility:","code":"Fruit <- function() {   Character(     length = 1,      ... = \"`value` is not a fruit!\" ~ . %in% c(\"apple\", \"pear\", \"cherry\")     # we could have several args named ... to apply multiple checks   ) }  Fruit() ? x <- \"potatoe\" #> Error: `value` is not a fruit! #> `value %in% c(\"apple\", \"pear\", \"cherry\")`: FALSE #> `expected`:                                TRUE Fruit() ? x <- 1L #> Error: type mismatch #> `typeof(value)`: \"integer\"   #> `expected`:      \"character\" Ggplot <- function() {   Any(... = \"Expected a ggplot object\" ~ ggplot2::is.ggplot(value)) }  Ggplot() ? x <- 1 #> Warning: `is.ggplot()` was deprecated in ggplot2 3.5.2. #> ℹ Please use `is_ggplot()` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> Error: Expected a ggplot object #> `ggplot2::is.ggplot(value)`: FALSE #> `expected`:                  TRUE ScalarInteger1 <- function(null_ok = FALSE, ...) {   Integer(length = 1, null_ok = null_ok, ...) } ScalarInteger1() ? x <- c(1L, 2L) #> Error: length mismatch #> `length(value)`: 2 #>      `expected`: 1 ScalarInteger2 <- function() {   Integer(length = 1) } ScalarInteger2() ? x <- c(1L, 2L) #> Error: length mismatch #> `length(value)`: 2 #>      `expected`: 1"},{"path":"https://moodymudskipper.github.io/typed/articles/typed-in-packages.html","id":"define-your-own-types-from-scratch","dir":"Articles","previous_headings":"","what":"Define your own types from scratch","title":"Using {typed} in packages","text":"can define check function use as_assertion_factory() . Another example, impose data type based prototype: want general: as_assertion_factory() actually used build native assertion factories package","code":"check_is_ggplot <- function(x) {   if(!ggplot2::is.ggplot(x)) {     msg <- \"Class mismatch\"     info1 <- \"Expected a ggplot object\"     info2 <- sprintf(\"Got an object of class <%s>\", paste(class(x), collapse = \"/\"))    rlang::abort(      c(msg, i = info1, x = info2)    )   } } Ggplot <- as_assertion_factory(check_is_ggplot)  Ggplot() ? x <- 1 #> Error: Class mismatch #> ℹ Expected a ggplot object #> ✖ Got an object of class <numeric> check_cars <- function(x) vctrs::vec_assert(x, cars) Cars <- as_assertion_factory(check_cars) Cars() ? x <- iris #> Error: `x` must be a vector with type: #>  #>   <data.frame< #>     speed: double #>     dist : double #>   >> #>  #> Instead, it has type: #>  #>   <data.frame< #>     Sepal.Length: double #>     Sepal.Width : double #>     Petal.Length: double #>     Petal.Width : double #>     Species     : factor<fb977> #>   >> check_valid_ptype <- function(x, ptype) vctrs::vec_assert(x, ptype) Ptype <- as_assertion_factory(check_valid_ptype) Ptype(cars) ? x <- iris #> Error: `x` must be a vector with type: #>  #>   <data.frame< #>     speed: double #>     dist : double #>   >> #>  #> Instead, it has type: #>  #>   <data.frame< #>     Sepal.Length: double #>     Sepal.Width : double #>     Petal.Length: double #>     Petal.Width : double #>     Species     : factor<fb977> #>   >>"},{"path":"https://moodymudskipper.github.io/typed/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Antoine Fabri. Author, maintainer.","code":""},{"path":"https://moodymudskipper.github.io/typed/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fabri (2025). typed: Support Types Variables, Arguments, Return Values. R package version 0.0.1.9000, https://github.com/moodymudskipper/typed.","code":"@Manual{,   title = {typed: Support Types for Variables, Arguments, and Return Values},   author = {Antoine Fabri},   year = {2025},   note = {R package version 0.0.1.9000},   url = {https://github.com/moodymudskipper/typed}, }"},{"path":"https://moodymudskipper.github.io/typed/index.html","id":"typed-","dir":"","previous_headings":"","what":"Support Types for Variables, Arguments, and Return Values","title":"Support Types for Variables, Arguments, and Return Values","text":"{typed} implements type system R, 3 main features: set variable types script body function, can’t assigned illegal values set argument types function definition set return type function user can define types, leverage assertions packages. hood variable types use active bindings, variable restricted assertion, modified way satisfy .","code":""},{"path":"https://moodymudskipper.github.io/typed/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Support Types for Variables, Arguments, and Return Values","text":"Install CRAN version : development version : attach :","code":"install.packages(\"typed\") remotes::install_github(\"moodymudskipper/typed\") # masking warning about overriding `?` library(typed, warn.conflicts = FALSE)"},{"path":[]},{"path":"https://moodymudskipper.github.io/typed/index.html","id":"question-mark-notation-and-declare","dir":"","previous_headings":"Set variable type","what":"Question mark notation and declare","title":"Support Types for Variables, Arguments, and Return Values","text":"examples set types assign values wrong type x y anymore. right type work. declare strict equivalent, slightly efficient, looks like base::assign.","code":"Character() ? x # restrict x to \"character\" type x <- \"a\" x #> [1] \"a\"  Integer(3) ? y <- 1:3 # restrict y to \"integer\" type of length 3 y #> [1] 1 2 3 x <- 2 #> Error: type mismatch #> `typeof(value)`: \"double\"    #> `expected`:      \"character\"  y <- 4:5 #> Error: length mismatch #> `length(value)`: 2 #>      `expected`: 3 x <- c(\"b\", \"c\")  y <- c(1L, 10L, 100L) declare(\"x\", Character()) x <- \"a\" x #> [1] \"a\"  declare(\"y\", Integer(3), 1:3) y #> [1] 1 2 3"},{"path":"https://moodymudskipper.github.io/typed/index.html","id":"assertion-factories-and-assertions","dir":"","previous_headings":"Set variable type","what":"Assertion factories and assertions","title":"Support Types for Variables, Arguments, and Return Values","text":"Integer Character function factories (functions return functions), thus Integer(3) Character() functions. latter functions operate checks value case success return value, generally unmodified. instance : call Integer(3) Character() assertions, call Integer Character assertion factories (just types, must careful confuse atomic types returned typeof function). package contains many assertion factories (see ?assertion_factories), main ones : (default restriction) Logical Integer Double Character List Environment Factor Matrix Data.frame Date Time (POSIXct)","code":"Integer(3)(1:2) #> Error: length mismatch #> `length(value)`: 2 #>      `expected`: 3  Character()(3) #> Error: type mismatch #> `typeof(value)`: \"double\"    #> `expected`:      \"character\""},{"path":"https://moodymudskipper.github.io/typed/index.html","id":"advanced-type-restriction-using-arguments","dir":"","previous_headings":"Set variable type","what":"Advanced type restriction using arguments","title":"Support Types for Variables, Arguments, and Return Values","text":"’ve seen Integer(3), passing arguments assertion factory restricts type. instance Integer arguments length null_ok .... already used length, null_ok convenient allow default NULL value addition \"integer\" type. arguments can differ assertion factories, instance Data.frame nrow, ncol, , null_ok ... dots can use arguments named functions value expected result. Useful arguments might instance, anyDuplicated = 0L, names = NULL, attributes = NULL… available function can used. makes assertion factories flexible! still flexible enough, can provide arguments arguments named ... functional factories add custom restriction, usually better done defining wrapper. often better done defining wrapper shown .","code":"Data.frame() ? x <- iris Data.frame(ncol = 2) ? x <- iris #> Error: Column number mismatch #> `ncol(value)`: 5 #>    `expected`: 2 Data.frame(each = Double()) ? x <- iris #> Error: column 5 (\"Species\") type mismatch #> `typeof(value)`: \"integer\" #> `expected`:      \"double\" # Integer has no anyNA arg but we can still use it because a function named # this way exists Integer(anyNA = FALSE) ? x <- c(1L, 2L, NA) #> Error: `anyNA` mismatch #> `anyNA(value)`: TRUE  #> `expected`:     FALSE Character(1, ... = \"`value` is not a fruit!\" ~ . %in% c(\"apple\", \"pear\", \"cherry\")) ?    x <- \"potatoe\" #> Error: `value` is not a fruit! #> `value %in% c(\"apple\", \"pear\", \"cherry\")`: FALSE #> `expected`:                                TRUE"},{"path":"https://moodymudskipper.github.io/typed/index.html","id":"constants","dir":"","previous_headings":"Set variable type","what":"Constants","title":"Support Types for Variables, Arguments, and Return Values","text":"define constant, just surround variable parentheses (think protection)","code":"Double() ? (x) <- 1 x <- 2 #> Error: Can't assign to a constant  # defining a type is optional ? (y) <- 1 y <- 2 #> Error: Can't assign to a constant"},{"path":"https://moodymudskipper.github.io/typed/index.html","id":"set-a-functions-argument-type","dir":"","previous_headings":"Set variable type","what":"Set a function’s argument type","title":"Support Types for Variables, Arguments, and Return Values","text":"can set argument types way : Note started definition ?, gave default y, x. Note also = sign next x, necessary even default value. forget ’ll error “unexpected ? …”. created following function, adding checks top body Let’s test providing right wrong type. want restrict x y type “integer” rest body, overwritten character instance,can use ?+ notation : see translated check_arg call containing .bind = TRUE argument.","code":"add <- ? function (x= ? Double(), y= 1 ? Double()) {   x + y } add #> # typed function #> function (x, y = 1)  #> { #>     check_arg(x, Double()) #>     check_arg(y, Double()) #>     x + y #> } #> # Arg types: #> # x: Double() #> # y: Double() add(2, 3) #> [1] 5 add(2, 3L) #> Error: In `add(2, 3L)` at `check_arg(y, Double())`: #> wrong argument to function, type mismatch #> `typeof(value)`: \"integer\" #> `expected`:      \"double\" add <- ? function (x= ?+ Double(), y= 1 ?+ Double()) {   x + y }  add #> # typed function #> function (x, y = 1)  #> { #>     check_arg(x, Double(), .bind = TRUE) #>     check_arg(y, Double(), .bind = TRUE) #>     x + y #> } #> # Arg types: #> # x: Double() #> # y: Double()"},{"path":"https://moodymudskipper.github.io/typed/index.html","id":"set-a-functions-return-type","dir":"","previous_headings":"","what":"Set a function’s return type","title":"Support Types for Variables, Arguments, and Return Values","text":"set return type use ? function definition previous section, type assertion left hand side. see returned values wrapped inside check_output calls.","code":"add_or_subtract <- Double() ? function (x, y, subtract = FALSE) {   if(subtract) return(x - y)   x + y } add_or_subtract #> # typed function #> function (x, y, subtract = FALSE)  #> { #>     if (subtract)  #>         return(check_output(x - y, Double())) #>     check_output(x + y, Double()) #> } #> # Return type: Double()"},{"path":"https://moodymudskipper.github.io/typed/index.html","id":"use-type-in-a-package-and-define-your-own-types","dir":"","previous_headings":"","what":"Use type in a package and define your own types","title":"Support Types for Variables, Arguments, and Return Values","text":"See vignette(\"typed--packaged\", \"typed\") Article section ’re browsing pkgdown website.","code":""},{"path":"https://moodymudskipper.github.io/typed/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Support Types for Variables, Arguments, and Return Values","text":"inspired good part Jim Hester Gabor Csardi’s work many great efforts static typing, assertions, annotations R, particular: Gabor Csardy’s argufy Richie Cotton’s assertive Tony Fishettti’s assertr Hadley Wickham’s assertthat Michel Lang’s checkmate Joe Thorley’s checkr Joe Thorley’s chk Aviral Goel’s contractr Stefan Bache’s ensurer Brian Lee Yung Rowe’s lambda.r Kun Ren’s rtype Duncan Temple Lang’s TypeInfo Jim Hester’s types","code":""},{"path":"https://moodymudskipper.github.io/typed/reference/as_assertion_factory.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a new type — as_assertion_factory","title":"Build a new type — as_assertion_factory","text":"Build new type","code":""},{"path":"https://moodymudskipper.github.io/typed/reference/as_assertion_factory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a new type — as_assertion_factory","text":"","code":"as_assertion_factory(f)"},{"path":"https://moodymudskipper.github.io/typed/reference/as_assertion_factory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a new type — as_assertion_factory","text":"f function","code":""},{"path":"https://moodymudskipper.github.io/typed/reference/as_assertion_factory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a new type — as_assertion_factory","text":"function class assertion_factory","code":""},{"path":"https://moodymudskipper.github.io/typed/reference/assertion_factories.html","id":null,"dir":"Reference","previous_headings":"","what":"Assertion factories of package 'typed' — assertion_factories","title":"Assertion factories of package 'typed' — assertion_factories","text":"functions assertion factories, produce assertions, take object, check conditions, returns input, usually unmodified (never modified functions documented page). Additional conditions can provided : named, name name function use object, value expected value. unnamed, formulas, right hand side condition, using value . placeholder latter, optional lhs error message. general assertion factory, check anything unless provided additional conditions .... Others use base .<type> function available, check object relevant type typeof atomic types, check class checked value contains relevant class. See advanced examples bottom, including uses Symbol() Dots().","code":""},{"path":"https://moodymudskipper.github.io/typed/reference/assertion_factories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assertion factories of package 'typed' — assertion_factories","text":"","code":"Any(length = NULL, ...)  Logical(length = NULL, null_ok = FALSE, ...)  Integer(length = NULL, null_ok = FALSE, ...)  Double(length = NULL, null_ok = FALSE, ...)  Character(length = NULL, null_ok = FALSE, ...)  Raw(length = NULL, null_ok = FALSE, ...)  List(length = NULL, each, data_frame_ok, null_ok = FALSE, ...)  Null(...)  Closure(null_ok = FALSE, ...)  Special(null_ok = FALSE, ...)  Builtin(null_ok = FALSE, ...)  Environment(null_ok = FALSE, ...)  Symbol(null_ok = FALSE, ...)  Pairlist(length = NULL, each, null_ok = TRUE, ...)  Language(null_ok = FALSE, ...)  Expression(length = NULL, null_ok = FALSE, ...)  Function(null_ok = FALSE, ...)  Factor(length = NULL, levels, null_ok = FALSE, ...)  Matrix(nrow, ncol, null_ok = FALSE, ...)  Array(dim, null_ok = FALSE, ...)  Data.frame(nrow, ncol, each, null_ok = FALSE, ...)  Date(length = NULL, null_ok = FALSE, ...)  Time(length = NULL, null_ok = FALSE, ...)  Dots(length = NULL, each, ...)  Logical(length = NULL, null_ok = FALSE, ...)  Integer(length = NULL, null_ok = FALSE, ...)  Double(length = NULL, null_ok = FALSE, ...)  Character(length = NULL, null_ok = FALSE, ...)  Raw(length = NULL, null_ok = FALSE, ...)  List(length = NULL, each, data_frame_ok = TRUE, null_ok = FALSE, ...)  Null(...)  Closure(null_ok = FALSE, ...)  Special(null_ok = FALSE, ...)  Builtin(null_ok = FALSE, ...)  Environment(null_ok = FALSE, ...)  Symbol(null_ok = FALSE, ...)  Pairlist(length = NULL, each, null_ok = TRUE, ...)  Language(null_ok = FALSE, ...)  Expression(length = NULL, null_ok = FALSE, ...)  Function(null_ok = FALSE, ...)  Factor(length = NULL, levels, null_ok = FALSE, ...)  Data.frame(nrow, ncol, each, null_ok = FALSE, ...)  Matrix(nrow, ncol, null_ok = FALSE, ...)  Array(dim, null_ok = FALSE, ...)  Date(length = NULL, null_ok = FALSE, ...)  Time(length = NULL, null_ok = FALSE, ...)  Dots(length = NULL, each, ...)"},{"path":"https://moodymudskipper.github.io/typed/reference/assertion_factories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assertion factories of package 'typed' — assertion_factories","text":"length length object ... additional conditions, see details. null_ok whether NULL values accepted, subjected check. assertion every item must satisfy data_frame_ok whether data frames considered lists levels factor levels nrow number rows ncol number columns dim dimensions","code":""},{"path":"https://moodymudskipper.github.io/typed/reference/assertion_factories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assertion factories of package 'typed' — assertion_factories","text":"function, specifically, assertion defined .","code":""},{"path":"https://moodymudskipper.github.io/typed/reference/assertion_factories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assertion factories of package 'typed' — assertion_factories","text":"","code":"if (FALSE) { # \\dontrun{ # fails Integer() ? x <- 1 # equivalent to declare(\"x\", Integer(), value = 1)  Integer(2) ? x <- 1L  # we can use additional conditions in `...` Integer(anyNA = FALSE) ? x <- c(1L, NA, 1L) Integer(anyDuplicated = 0L) ? x <- c(1L, NA, 1L) } # }  Integer(2) ? x <- 11:12  if (FALSE) { # \\dontrun{ # We can also use it directly to test assertions Integer() ? x <- 1 # equivalent to declare(\"x\", Integer(), value = 1)  Integer(2) ? x <- 1L } # }  if (FALSE) { # \\dontrun{ # I we want to restrict the quoted expression rather than the value of an # argument, we can use `?~` : identity_sym_only <- ? function (x= ?~ Symbol()) {   x }  a <- 1 identity_sym_only(a) identity_sym_only(a + a)  identity_sym_only } # }  if (FALSE) { # \\dontrun{ integer_list <- ? function (...= ? Integer()) {   list(...) }  integer_list(1L, 2L, \"a\")  integer_pair <- ? function (...= ? Dots(2, each = Integer())) {   list(...) }  integer_pair(1L, 2L, 3L) integer_pair(1L, \"a\", \"a\")  x <- 1 y <- 2 symbol_list1 <- ? function (...= ? Dots(2, Symbol())) {   list(...) } symbol_list1(quote(x), quote(y)) symbol_list1(x, y)  symbol_list2 <- ? function (...= ?~ Dots(2, Symbol())) {   list(...) } symbol_list2(x, x + y) symbol_list2(x, y) } # }"},{"path":"https://moodymudskipper.github.io/typed/reference/check_arg.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Argument Types and Return Type — check_output","title":"Check Argument Types and Return Type — check_output","text":"functions designed used directly, advise use syntaxes described ?declare instead. check_arg checks arguments satisfy assertion, relevant make active bindings make sure always satisy . check_output checks value, presumably return value, satisfies assertion,","code":""},{"path":"https://moodymudskipper.github.io/typed/reference/check_arg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Argument Types and Return Type — check_output","text":"","code":"check_output(.output, .assertion, ...)  check_arg(.arg, .assertion, ..., .bind = FALSE)"},{"path":"https://moodymudskipper.github.io/typed/reference/check_arg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Argument Types and Return Type — check_output","text":".output function output .assertion assertion ... additional arguments passed assertion .arg function argument .bind whether actively bind argument modified unless satisfies assertion","code":""},{"path":"https://moodymudskipper.github.io/typed/reference/check_arg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Argument Types and Return Type — check_output","text":".outputif satisfies assertion, fails otherwise. returns NULL invisibly, called side effects.","code":""},{"path":"https://moodymudskipper.github.io/typed/reference/declare.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Variable Types, Argument Types and Return Types. — ?","title":"Set Variable Types, Argument Types and Return Types. — ?","text":"Use ? set function's return type, argument types, variable types body function. declare alternative set variable's type.","code":""},{"path":"https://moodymudskipper.github.io/typed/reference/declare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Variable Types, Argument Types and Return Types. — ?","text":"","code":"`?`(lhs, rhs)  declare(x, assertion, value, const = FALSE)"},{"path":"https://moodymudskipper.github.io/typed/reference/declare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Variable Types, Argument Types and Return Types. — ?","text":"lhs lhs rhs rhs x variable name string assertion function value optional value const whether declare x constant","code":""},{"path":"https://moodymudskipper.github.io/typed/reference/declare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Variable Types, Argument Types and Return Types. — ?","text":"declare (? maps declare) returns value invisibly, called side effects. assertion ? function(<args>) {<body>} returns typed function, class c(\"typed\", \"function\"). fun <- assertion ? function(<args>) {<body>} returns typed function binds fun local environment.","code":""},{"path":"https://moodymudskipper.github.io/typed/reference/declare.html","id":"set-a-variable-s-type","dir":"Reference","previous_headings":"","what":"Set A Variable's Type","title":"Set Variable Types, Argument Types and Return Types. — ?","text":"used set variable's type, ? maps declare assertion ? var calls declare(\"var\", assertion), assertion ? var <- value calls declare(\"var\", assertion, value), assertion ? (var) <- value calls declare(\"var\", assertion, value, const = TRUE) cases active binding defined var returns value (NULL none provided). const FALSE (default), returned value can altered assigning var, value satisfy assertion trigger error.","code":""},{"path":"https://moodymudskipper.github.io/typed/reference/declare.html","id":"set-a-function-s-return-type","dir":"Reference","previous_headings":"","what":"Set A Function's Return Type","title":"Set Variable Types, Argument Types and Return Types. — ?","text":"syntaxes assertion ? function(<args>) {<body>} fun <- assertion ? function(<args>) {<body>} can used create function class c(\"typed\", \"function\"). returned function body modified return values wrapped inside check_output() call. Printing function display return type.","code":""},{"path":"https://moodymudskipper.github.io/typed/reference/declare.html","id":"set-a-function-argument-s-type","dir":"Reference","previous_headings":"","what":"Set A Function Argument's Type","title":"Set Variable Types, Argument Types and Return Types. — ?","text":"using syntax, want force return type, simpler ? function(<args>) {<body>} fun <- ? function(<args>) {<body>} syntax, can set argument types providing arguments arg = default_value ? assertion arg = ? assertion. entering function, argument types checked. default arguments checked top, might assigned later function's body values satisfy assertion, avoid can type arg = default_value ? +assertion arg = ? +assertion. Note forgetting ? function easy mistake ! rather check quoted argument rather argument's value, can type arg = default_value ? ~assertion arg = ? ~assertion. possible use case might arg = ? ~ Symbol(). Dots can checked , ... = ? assertion make sure every argument passed dots satisfies assertion. special assertion factory Dots can also used, case checks apply list(...) rather element individually, instance function(... = ? Dots(2)) makes sure dots fed 2 values. returned function body modified arguments checked check_arg() calls top. Printing function display argument types.","code":""},{"path":"https://moodymudskipper.github.io/typed/reference/declare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Variable Types, Argument Types and Return Types. — ?","text":"","code":"Integer() ? function (x= ? Integer()) {   Integer() ? y <- 2L   res <- x + y   res } #> # typed function #> function (x)  #> { #>     check_arg(x, Integer()) #>     declare(\"y\", Integer(), value = 2L) #>     res <- x + y #>     check_output(res, Integer()) #> } #> <environment: 0x55d7e85a7ee8> #> # Return type: Integer() #> # Arg types: #> # x: Integer()"},{"path":"https://moodymudskipper.github.io/typed/reference/process_assertion_factory_dots.html","id":null,"dir":"Reference","previous_headings":"","what":"Process assertion factory dots — process_assertion_factory_dots","title":"Process assertion factory dots — process_assertion_factory_dots","text":"needs exported, called user","code":""},{"path":"https://moodymudskipper.github.io/typed/reference/process_assertion_factory_dots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process assertion factory dots — process_assertion_factory_dots","text":"","code":"process_assertion_factory_dots(...)"},{"path":"https://moodymudskipper.github.io/typed/reference/process_assertion_factory_dots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process assertion factory dots — process_assertion_factory_dots","text":"... dots","code":""},{"path":"https://moodymudskipper.github.io/typed/reference/process_assertion_factory_dots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process assertion factory dots — process_assertion_factory_dots","text":"{ expression","code":""},{"path":"https://moodymudskipper.github.io/typed/reference/typed-package.html","id":null,"dir":"Reference","previous_headings":"","what":"typed: Support Types for Variables, Arguments, and Return Values — typed-package","title":"typed: Support Types for Variables, Arguments, and Return Values — typed-package","text":"type system R. supports setting variable types script body function, variables assigned illegal values. Moreover supports setting argument return types functions.","code":""},{"path":[]},{"path":"https://moodymudskipper.github.io/typed/reference/typed-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"typed: Support Types for Variables, Arguments, and Return Values — typed-package","text":"Maintainer: Antoine Fabri antoine.fabri@gmail.com","code":""},{"path":"https://moodymudskipper.github.io/typed/reference/use_typed.html","id":null,"dir":"Reference","previous_headings":"","what":"Use the 'typed' package — use_typed","title":"Use the 'typed' package — use_typed","text":"sets package can use 'typed', editing DESCRIPTION file editing creating 'R/.pkg-package.R'","code":""},{"path":"https://moodymudskipper.github.io/typed/reference/use_typed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use the 'typed' package — use_typed","text":"","code":"use_typed()"},{"path":"https://moodymudskipper.github.io/typed/reference/use_typed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use the 'typed' package — use_typed","text":"Returns NULL invisibly, called side effects","code":""}]
